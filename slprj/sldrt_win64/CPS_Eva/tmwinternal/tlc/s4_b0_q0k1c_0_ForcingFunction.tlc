%implements s4_b0_q0k1c_0_ForcingFunction "C"

%function ForcingFunction(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

uint32_T ri;
%closefile localVarDecl
/* {S!d822}ForcingFunction for StateSpace: '<Root>/Analog Filter Design' */
localXdot->AnalogFilterDesign_CSTATE[0] = 0.0;
localXdot->AnalogFilterDesign_CSTATE[1] = 0.0;
localXdot->AnalogFilterDesign_CSTATE[2] = 0.0;
localXdot->AnalogFilterDesign_CSTATE[3] = 0.0;
for (ri = CPS_Eva_P.AnalogFilterDesign_A_jc[0U]; ri < CPS_Eva_P.AnalogFilterDesign_A_jc[1U]; ri++) {
    localXdot->AnalogFilterDesign_CSTATE[CPS_Eva_P.AnalogFilterDesign_A_ir[ri]] += CPS_Eva_P.AnalogFilterDesign_A_pr[ri] * localX->AnalogFilterDesign_CSTATE[0U];
}
for (ri = CPS_Eva_P.AnalogFilterDesign_A_jc[1U]; ri < CPS_Eva_P.AnalogFilterDesign_A_jc[2U]; ri++) {
    localXdot->AnalogFilterDesign_CSTATE[CPS_Eva_P.AnalogFilterDesign_A_ir[ri]] += CPS_Eva_P.AnalogFilterDesign_A_pr[ri] * localX->AnalogFilterDesign_CSTATE[1U];
}
for (ri = CPS_Eva_P.AnalogFilterDesign_A_jc[2U]; ri < CPS_Eva_P.AnalogFilterDesign_A_jc[3U]; ri++) {
    localXdot->AnalogFilterDesign_CSTATE[CPS_Eva_P.AnalogFilterDesign_A_ir[ri]] += CPS_Eva_P.AnalogFilterDesign_A_pr[ri] * localX->AnalogFilterDesign_CSTATE[2U];
}
for (ri = CPS_Eva_P.AnalogFilterDesign_A_jc[3U]; ri < CPS_Eva_P.AnalogFilterDesign_A_jc[4U]; ri++) {
    localXdot->AnalogFilterDesign_CSTATE[CPS_Eva_P.AnalogFilterDesign_A_ir[ri]] += CPS_Eva_P.AnalogFilterDesign_A_pr[ri] * localX->AnalogFilterDesign_CSTATE[3U];
}
for (ri = CPS_Eva_P.AnalogFilterDesign_B_jc[0U]; ri < CPS_Eva_P.AnalogFilterDesign_B_jc[1U]; ri++) {
    localXdot->AnalogFilterDesign_CSTATE[CPS_Eva_P.AnalogFilterDesign_B_ir] += CPS_Eva_P.AnalogFilterDesign_B_pr * localB->Gain5;
}
/* {E!d822}End of ForcingFunction for StateSpace: '<Root>/Analog Filter Design' */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("ForcingFunction", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ForcingFunction"))
%<SLibCG_AccessArg(0, 6, 0)>
%endif
%if SLibCG_ArgAccessed(0, 6, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "ForcingFunction", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "ForcingFunction"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(0, 6, 0)>
%endif
%<LibSetSystemField(system, "CachedForcingFunctionLocalVars", localVarDecl)>
%endfunction
%function ForcingFunctionFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void CPS_Eva_ForcingFunction(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 6, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("CPS_Eva_ForcingFunction", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>B_CPS_Eva_c_T *localB\
%assign comma = ", "
%<comma>X_CPS_Eva_n_T *localX\
%assign comma = ", "
%<comma>XDot_CPS_Eva_n_T *localXdot\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 6, fcnProtoType)>
%endfunction
