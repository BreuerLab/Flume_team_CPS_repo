%% Analytical solution
% post setting the mass (M), spring constant (k), and damping (c) in CPS
% parameters you can use this code to determine the analytical solution for
% the motion of the heave given an offset of x_0
total_time=10;
omega_n=(k/M)^0.5;
xi=c/((k*M)^.5);
omega_d=omega_n*(1-xi^2)^0.5; %omega d is just omega n and xi 
x_0=start_position_cm;
i=[0:T:total_time];
n=0;
x=zeros(1,size(i,2));
% %% equation in terms of omega_n, xi, answer non dimensionalized as x_tilda and t_tilda
% for t=i
% n=n+1;
% x(n)=((omega_d^2*x_0^2+(xi*omega_n*x_0)^2)/(omega_d^2))^0.5*exp(-xi*omega_n*t)*sin(omega_d*t+atan(omega_d/(xi*omega_n)));
% end
% plot((i*omega_n)/(2*pi),x/x_0);
% hold on;
% ana_1=x/x_0;
% %% dimensionless in terms of t_tilda, x_tilda, xi
% T_tild=omega_n*T/(2*pi);
% i=[0:T_tild:(omega_n*total_time/(2*pi))];
%   
% x_tilda=zeros(1,size(i,2));
% n=0;
% for t_tilda=i
% n=n+1;
% x_tilda(n)=((exp(-xi*2*pi*t_tilda))/(1-xi^2))*sin(2*pi*t_tilda*(1-xi^2)+atan(((1-xi^2)^0.5)/xi));
% end
% %x=x_0*x_tilda;
% plot(i,x_tilda);
% ana_2=x_tilda;
%% New attempt analytical
tim=[0:T:10];
root=roots([M c k]);
c1=start_position_cm;
if(isreal(root)==0) %complex
    a=real(root(1));
    b=imag(root(1));
    c2=-a*c1/b;
    sol=exp(a.*tim).*(c1.*cos(b.*tim)+c2.*sin(b.*tim));
    sol_vel=a.*exp(a.*tim).*(c1.*cos(b.*tim)+c2.*sin(b.*tim))+exp(a.*tim).*(-b.*c1.*sin(b.*tim)+b.*c2.*cos(b.*tim));
    sol_acc=exp(a.*tim).*(sin(b.*tim).*(a^2.*c2-2.*a.*b.*c1-b^2.*c2)+cos(b.*tim).*(a^2.*c1+2.*a.*b.*c2-b.*c2));
elseif(root(1)~=root(2)) %distinct
    c2=-c1*root(1)/root(2);    
    r1=root(1);
    r2=root(2);
    sol=c1.*exp(root(1).*tim)+c2.*exp(root(2).*tim);
    sol_vel=c1.*r1.*exp(r1.*tim)+c2.*r2.*exp(r2.*tim);
    sol_acc=c1.*r1^2.*exp(r1.*tim)+c2.*r2^2.*exp(r2.*tim);
elseif(root(1)==root(2)) %repeated roots
    c2=-c1*root(1);
    r1=root(1);
    sol=exp(root(1).*tim).*(c1+c2.*tim);
    sol_vel=exp(r1.*tim).*(c1.*r1+c2.*r1.*tim+c2);
    sol_acc=r1.*exp(r1.*tim).*(c1.*r1+c2.*(r1.*tim+2));
end
analyt=sol/start_position_cm;
plot(tim*((k/M)^0.5)/(2*pi),sol/start_position_cm);
%%
plot(tim*((k/M)^0.5)/(2*pi),sol/start_position_cm);
hold on;
cps_f_zero=(out.Heave_of_ideal_CPS_cm(:,2)/start_position_cm)';
plot((i*omega_n)/(2*pi),cps_f_zero);
legend('analytical','ideal cps');
ylabel('x/x_0');
xlabel('t*sqrt((k/M))/2pi')